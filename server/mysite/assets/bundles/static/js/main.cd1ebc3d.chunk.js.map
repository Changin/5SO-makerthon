{"version":3,"sources":["components/LivePlay.js","components/MainContext.js","App.js","reportWebVitals.js","index.js"],"names":["getWebcam","callback","navigator","mediaDevices","getUserMedia","then","err","console","log","Styles","Video","width","height","background","None","display","LivePlay","React","useState","undefined","playing","setPlaying","videoRef","useRef","useEffect","stream","current","srcObject","style","padding","ref","autoPlay","color","onClick","getTracks","forEach","track","stop","MainContextBlock","styled","div","MainContext","class","GlobalStyle","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAGMA,EAAY,SAACC,GACjB,IAKEC,UAAUC,aAAaC,aAJH,CAClB,OAAS,EACT,OAAS,IAGRC,KAAKJ,GACR,MAAOK,GAEP,YADAC,QAAQC,IAAIF,KAKVG,EAAS,CACbC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,MAAOC,WAAY,WACnDC,KAAM,CAAEC,QAAS,SAuCFC,I,EAAAA,EAnCjB,WACI,MAA8BC,IAAMC,cAASC,GAA7C,mBAAOC,EAAP,KAAgBC,EAAhB,KAEMC,EAAWL,IAAMM,OAAO,MAwB9B,OAtBAN,IAAMO,WAAU,WACdxB,GAAW,SAAAyB,GACTJ,GAAW,GACXC,EAASI,QAAQC,UAAYF,OAE9B,IAiBK,mCACN,sBAAKG,MAAO,CAAEjB,MAAO,QAASC,OAAQ,QAASiB,QAAS,OAAxD,UACE,uBAAOC,IAAKR,EAAUS,UAAQ,EAACH,MAAOnB,EAAOC,QAC7C,yBAASsB,MAAM,UAAWC,QAAS,kBAjBjCb,EACQE,EAASI,QAAQC,UACzBO,YAAYC,SAAQ,SAACC,GACrBA,EAAMC,UAGRrC,GAAW,SAAAyB,GACTJ,GAAW,GACXC,EAASI,QAAQC,UAAYF,UAGjCJ,GAAYD,IAMV,UAAyDA,EAAU,OAAS,QAA5E,aC/CFkB,G,MAAmBC,IAAOC,IAAV,yJA8BPC,I,EAAAA,EAlBf,WACI,OACE,qCACA,qBAAKC,MAAM,WAAX,SACI,cAACJ,EAAD,UACI,4GAGN,qBAAKI,MAAM,UAAX,SACE,yCAGF,cAAC,EAAD,QCzBFC,EAAYC,YAAD,gLA4BFC,MAff,WAGE,OACE,qCACA,cAACF,EAAD,IACA,8BAAK,cAAC,EAAD,MAGL,0JCfWG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3C,MAAK,YAAkD,IAA/C4C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.cd1ebc3d.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./styles/LivePlay.css\";\r\n\r\nconst getWebcam = (callback) => {\r\n  try {\r\n    const constraints = {\r\n      'video': true,\r\n      'audio': false\r\n    }\r\n    navigator.mediaDevices.getUserMedia(constraints)\r\n      .then(callback);\r\n  } catch (err) {\r\n    console.log(err);\r\n    return undefined;\r\n  }\r\n}\r\n\r\nconst Styles = {\r\n  Video: { width: \"100%\", height: \"60%\", background: '#536349'},\r\n  None: { display: 'none' },\r\n}\r\n\r\n\r\nfunction LivePlay() {\r\n    const [playing, setPlaying] = React.useState(undefined);\r\n  \r\n    const videoRef = React.useRef(null);\r\n  \r\n    React.useEffect(() => {\r\n      getWebcam((stream => {\r\n        setPlaying(true);\r\n        videoRef.current.srcObject = stream;\r\n      }));\r\n    }, []);\r\n  \r\n    const startOrStop = () => {\r\n      if (playing) {\r\n        const s = videoRef.current.srcObject;\r\n        s.getTracks().forEach((track) => {\r\n          track.stop();\r\n        });\r\n      } else {\r\n        getWebcam((stream => {\r\n          setPlaying(true);\r\n          videoRef.current.srcObject = stream;\r\n        }));\r\n      }\r\n      setPlaying(!playing);\r\n    }\r\n  \r\n    return (<>\r\n      <div style={{ width: '100vw', height: '100vh', padding: '0px' }}>\r\n        <video ref={videoRef} autoPlay style={Styles.Video} />\r\n        <button  color=\"warning\"  onClick={() => startOrStop()}>{playing ? 'Stop' : 'Start'} </button>\r\n      </div >\r\n    </>);\r\n  }\r\n  \r\n  export default LivePlay;","import React from 'react';\r\nimport styled  from 'styled-components';\r\nimport LivePlay from './LivePlay';\r\nimport \"./styles/MainContext.css\";\r\nimport \"../App.css\"\r\n\r\nconst MainContextBlock = styled.div`\r\nmargin-top:15px;\r\n  h1 {\r\n    font-family: \"strongmil_bold\";\r\n    margin: 0;\r\n    font-size: 50px;\r\n    color: white;\r\n  }\r\n`;\r\n\r\n\r\n\r\nfunction MainContext() {\r\n    return (\r\n      <>\r\n      <div class=\"centered\">\r\n          <MainContextBlock>\r\n              <h1>거수자 속에 포상 휴가있다!</h1>\r\n          </MainContextBlock>\r\n        </div>\r\n        <div class=\"channel\">\r\n          <h4>&#91;CH1&#93;</h4>\r\n        </div>\r\n\r\n        <LivePlay />\r\n    \r\n    </>\r\n    )  \r\n      }\r\n\r\nexport default MainContext;","import React from \"react\";\r\nimport \"./App.css\";\r\nimport {createGlobalStyle} from 'styled-components';\r\nimport MainContext from \"./components/MainContext.js\";\r\n\r\nconst GlobalStyle=createGlobalStyle`\r\nbody{\r\n  background:#536349;\r\n\r\n  p {\r\n    font-family:\"NanumSquareRoundL\";\r\n    font-size:11px;\r\n    float:right;\r\n    margin-bottom:0px;\r\n  }\r\n}\r\n`;\r\n\r\nfunction App() {\r\n\r\n \r\n  return(\r\n    <>\r\n    <GlobalStyle />\r\n    <div><MainContext /></div>\r\n\r\n\r\n    <p>Copyright (c) 2021 이승엽,\r\n      김창현, 이준용, 한준서, 백창인</p>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}